// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
contract VulnerablePiggyBank {
    address public immutable owner;
    uint256 public totalDeposited;

    mapping (address => uint256) balances; 

    modifier onlyClient () {
        if (balances[msg.sender] == 0) revert("Insufficient funds");
        _;

    }

    constructor (address _owner) { 
        owner=_owner;
    }

    function deposit(uint256 _amount) external payable {
        require (_amount > 0, "Amount must be greater than 0");
        require(msg.value == _amount, "ETH sent must match amount");
        balances[msg.sender] += _amount;
        totalDeposited += _amount;
        
    }

    function withdraw() external {
    require(msg.sender == owner, "Only owner can withdraw");
    
    uint256 balance = address(this).balance;
    require(balance > 0, "No funds to withdraw");
    
    (bool callSuccess, ) = payable(msg.sender).call{value: balance}("");
    require(callSuccess, "Withdrawal failed");
    }
    
}
